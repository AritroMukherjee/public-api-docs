FORMAT: 1A
HOST: https://groker.initialstate.com/api

# Initial State Events Api
Here you'll find documentation on how to consume the events api for Initial State. At the moment, this api allows sending buffered stream event data to Initial State.

# Group Versioning
This api is versioned with **semver** style versions, if you're not familiar with semver, check it out [here](http://semver.org/). The api respects the `Accept-Version` HTTP header to provide predictable request/response versioning. You can check the current supported versions by performing a `GET` on the `/versions` route. If you don't include an `Accept-Version` header, the api assumes that you want the latest version. The value of `Accept-Version` can be specified like NPM dependencies.

## Versions [/versions]
A `version` is a string `semver`.

### Get supported versions [GET]

+ Response 200 (application/json)

    + Body
    
            [
                "0.0.1"
            ]

        

# Group Event Buckets
**Buckets** are groupings of `event` data. They associate events together by a unique `bucketKey`. The `bucketKey`s uniqueness is scoped to an access key, so two buckets with the same bucketKey on two different access keys will result in two unique buckets.

## Buckets [/buckets]
A `bucket` is a collection of `event` data.

Common Scenarios:
- `201`: If a `POST` is made to `/buckets` with a accessKey/bucketKey combination that is unique, doesn't exist, and can be created, the api will respond with a `201` Created response.
- `204`: If a `POST` is made to `/buckets` with a accessKey/bucketKey combination that has already been created, the api will respond with a `204` No Content response.

**Custom Headers**

|name|notes|
|----|-----|
|`X-IS-AccessKey`|This is the access key generated from www.initialstate.com account|

**Bucket JSON Entity**

|parameter|required|type|illegal characters|length limit|notes|
|---------|--------|----|-----|---|---|
|bucketKey|*true*|`string`| `:`, `"`, `'`|250 characters|associates event data|
|bucketName|*false*|`string`|none|250 characters|friendly name of the bucket, shows in the bucket shelf in the UI|

### Create a bucket [POST]

+ Request

    + Header
    
            Content-Type: application/json
            X-IS-AccessKey: 1234
            Accept-Version: ~0
    
    + Body
    
            {
                "bucketKey": "apiary_bucket",
                "bucketName": "Apiary Bucket"
            }

+ Response 201 (application/json)
+ Response 204
+ Response 401
+ Response 403 (text/plain)

    + Body
    
            "ACCESS_DENIED_KEY"
            
+ Response 500

    + Body
    
            "CORE_API_ERROR"

# Group Event Data
These endpoints are related to the `events` resource. An `event` is simply a data point with a timestamp.

## Events [/events]
### Send Events [POST]
This is the main endpoint for shipping data to Initial State's Events Api. The data is sent in an array of JSON objects that represent individual events. You can submit one event or an array of events where the body size is not larger than 1 megabyte.

**Limits**

|type|limit|exceeded response HTTP status code|
|----|-----|----------------------|
|`Content-Length`|<= 1 megabyte|`413` Request Entity Too Large|
|request rate|5 r/s (for non-enterprise)|`429` Too Many Requests|

**Recommended Max Throughput**
- 5 r/s with 10 events/request

**Custom Headers**

|name|notes|
|----|-----|
|`X-IS-AccessKey`|This is the access key generated from www.initialstate.com account|
|`X-IS-BucketKey`|This is a user generated key and can be any string exluding characters `:`, `"`, `'`. See *Bucket Creation* endpoint|

**Event JSON Entity**
> **Note**: JSON events can be sent as either a single object at the root of the http body i.e. `{"key": "temp", "value": 32}`, or inside an array at the root of the HTTP body `[{"key": "temp", "value": 32}]`

|name|required|type|max length|notes|
|----|----|-----|---|---|
|key |*true*|`string`|100 characters|stream key name|
|value |*true*|`string`, `bool`, or `number`|2000 characters|stream value|
|epoch |*false*|`number`||epoch is in seconds with fractional seconds to right of decimal.|
|iso8601|*false*|`string`||ISO-8601 Timestamp|

> **Timestamping**: If the client doesn't provide a timestamp, a server timestamp will be automatically provided. If a client provides a valid `epoch` value, the `epoch` will be used instead. If the `iso8601` value is supplied it will be used instead. It's important to note, that if both a valid `epoch` and `iso8601` are supplied, the `epoch` will be used as the source of truth.

+ Request
    + Headers
            
            Content-Type: application/json
            X-IS-AccessKey: 1234
            X-IS-BucketKey: apiary_bucket
            Accept-Version: ~0
    
    + Body
    
            [
                {
                    "key": "tempurature",
                    "value": "1",
                    "epoch": 1419876021.778477
                },
                {
                    "key": "temperature",
                    "value": "2",
                    "epoch": 1419876022.778477
                },
                {
                    "key": "temperature",
                    "value": "3",
                    "epoch": 1419876023.778477
                },
                {
                    "key": "temperature",
                    "value": "4",
                    "epoch": 1419876024.778477
                },
                {
                    "key": "temperature",
                    "value": "5",
                    "epoch": 1419876025.778477
                },
                {
                    "key": "temperature",
                    "value": "6",
                    "epoch": 1419876026.778477
                },
                {
                    "key": "temperature",
                    "value": "7",
                    "epoch": 1419876026.778477
                },
                {
                    "key": "temperature",
                    "value": "8",
                    "epoch": 1419876027.778477
                },
                {
                    "key": "temperature",
                    "value": "9",
                    "epoch": 1419876028.778477
                },
                {
                    "key": "temperature",
                    "value": "10",
                    "epoch": 1419876029.778477
                }
            ]

+ Response 204
+ Response 401
+ Response 402 (application/json)
    + Body
    
            {
                "message": "Event limit exceeded for current cycle..."
            }
+ Response 429
+ Response 500